// 얼굴 인식 코드
import cv2

face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
img = cv2.imread('웹캠 캡쳐 화면.jpg')
faces = face_cascade.detectMultiScale(img, scaleFactor=1.3, minNeighbors=5, minSize=(30, 30))

for (x, y, w, h) in faces:
    print(f"Detected face position: x={x}, y={y}, width={w}, height={h}")

cv2.imshow('얼굴감지', img)
cv2.waitKey(0)
cv2.destroyAllWindows()


// 사진 꾸미기 코드
import cv2
import numpy as np
import random

face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

img = cv2.imread('face.jpg')

if img is None:
    print("Error loading image.")
    exit()

faces = face_cascade.detectMultiScale(img, scaleFactor=1.3, minNeighbors=5, minSize=(30, 30))

santa = cv2.imread('santa.png', -1)
snowman = cv2.imread('snowman.png', -1)
rudolph = cv2.imread('rudolph.png', -1)
wreath = cv2.imread('wreath.png', -1)
tree = cv2.imread('tree.png', -1)

red_frame_color = (0, 0, 139)
red_frame_thickness_horizontal = 80

green_frame_color = (0, 100, 0)
green_frame_thickness_vertical = 80

img_with_overlay = img.copy()

img_with_overlay = cv2.rectangle(img_with_overlay, (0, 0), (img.shape[1], red_frame_thickness_horizontal), red_frame_color, -1)
img_with_overlay = cv2.rectangle(img_with_overlay, (0, img.shape[0] - red_frame_thickness_horizontal), (img.shape[1], img.shape[0]), red_frame_color, -1)

img_with_overlay = cv2.rectangle(img_with_overlay, (0, 0), (green_frame_thickness_vertical, img.shape[0]), green_frame_color, -1)
img_with_overlay = cv2.rectangle(img_with_overlay, (img.shape[1] - green_frame_thickness_vertical, 0), (img.shape[1], img.shape[0]), green_frame_color, -1)

stickers = [santa, snowman, rudolph, wreath, tree]

for (x, y, w, h) in faces:
    face_image = img[y:y+h, x:x+w]

    overlay_image = random.choice(stickers)

    overlay_width = w
    overlay_height = int(w * (overlay_image.shape[0] / overlay_image.shape[1]))
    overlay_resized = cv2.resize(overlay_image, (overlay_width, overlay_height))

    rand_x = random.randint(0, w - overlay_width)
    rand_y = random.randint(0, h - overlay_height)

    for c in range(0, 3):
        face_image[rand_y:rand_y+overlay_height, rand_x:rand_x+overlay_width, c] = \
            face_image[rand_y:rand_y+overlay_height, rand_x:rand_x+overlay_width, c] * (1 - overlay_resized[:, :, 3] / 255.0) + \
            overlay_resized[:, :, c] * (overlay_resized[:, :, 3] / 255.0)

    img_with_overlay[y:y+h, x:x+w] = face_image

cv2.imshow('Result Image', img_with_overlay)
cv2.imwrite('result_image.png', img_with_overlay)
cv2.waitKey(0)
cv2.destroyAllWindows()
